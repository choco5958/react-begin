{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/git-hub/react-begin/src/App2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo, useCallback, useReducer } from 'react';\nimport UserList from './UserList2';\nimport CreateUser from './CreateUser2';\nimport useInputs from './hooks/useInputs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n}\n\nconst initialState = {\n  inputs: {\n    username: '',\n    email: ''\n  },\n  users: [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com',\n    active: false\n  }]\n};\n\nfunction reducer2(state, action) {\n  switch (action.type) {\n    case 'CHANGE_INPUT':\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.name]: action.value\n        }\n      };\n\n    case 'CREATE_USER':\n      return {\n        inputs: initialState.inputs,\n        users: state.users.concat(action.user)\n      };\n\n    case 'TOGGLE_USER':\n      return { ...state,\n        users: state.users.map(user => user.id === action.id ? { ...user,\n          active: !user.active\n        } : user)\n      };\n\n    case 'REMOVE_USER':\n      return { ...state,\n        users: state.users.filter(user => user.id !== action.id)\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction App2() {\n  _s();\n\n  //커스텀 hook 사용시\n  const [{\n    username,\n    email\n  }, onChange, reset] = useInputs({\n    username: '',\n    email: ''\n  });\n  const [state, dispatch] = useReducer(reducer2, initialState);\n  const nextId = useRef(4);\n  const {\n    users\n  } = state; // const { username, email } = state.inputs;\n  // const onChange = useCallback(e => {\n  //   const { name, value } = e.target;\n  //   dispatch({\n  //     type: 'CHANGE_INPUT',\n  //     name,\n  //     value\n  //   });\n  // }, []);\n\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: 'CREATE_USER',\n      user: {\n        id: nextId.current,\n        username,\n        email\n      }\n    });\n    nextId.current += 1;\n  }, [username, email]);\n  const onToggle = useCallback(id => {\n    dispatch({\n      type: 'TOGGLE_USER',\n      id\n    });\n  }, []);\n  const onRemove = useCallback(id => {\n    dispatch({\n      type: 'REMOVE_USER',\n      id\n    });\n  }, []);\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      username: username,\n      email: email,\n      onChange: onChange,\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onToggle: onToggle,\n      onRemove: onRemove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790 \\uC218 : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // function App2() {\n//   const [inputs, setInputs] = useState({\n//     username: '',\n//     email: ''\n//   });\n//   const { username, email } = inputs;\n//   const onChange = useCallback(e => {\n//     const { name, value } = e.target;\n//     setInputs(inputs => ({\n//       ...inputs,\n//       [name]: value\n//     }));\n//   }, []);\n//   const [users, setUsers] = useState([\n//     {\n//       id: 1,\n//       username: 'velopert',\n//       email: 'public.velopert@gmail.com',\n//       active: true\n//     },\n//     {\n//       id: 2,\n//       username: 'tester',\n//       email: 'tester@example.com',\n//       active: false\n//     },\n//     {\n//       id: 3,\n//       username: 'liz',\n//       email: 'liz@example.com',\n//       active: false\n//     }\n//   ]);\n//   const nextId = useRef(4);\n//   const onCreate = useCallback(() => {\n//     const user = {\n//       id: nextId.current,\n//       username,\n//       email\n//     };\n//     setUsers(users => users.concat(user));\n//     setInputs({\n//       username: '',\n//       email: ''\n//     });\n//     nextId.current += 1;\n//   }, [username, email]);\n//   const onRemove = useCallback(id => {\n//     // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n//     // = user.id 가 id 인 것을 제거함\n//     setUsers(users => users.filter(user => user.id !== id));\n//   }, []);\n//   const onToggle = useCallback(id => {\n//     setUsers(users =>\n//       users.map(user =>\n//         user.id === id ? { ...user, active: !user.active } : user\n//       )\n//     );\n//   }, []);\n//   const count = useMemo(() => countActiveUsers(users), [users]);\n//   return (\n//     <>\n//       <CreateUser\n//         username={username}\n//         email={email}\n//         onChange={onChange}\n//         onCreate={onCreate}\n//       />\n//       <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n//       <div>활성사용자 수 : {count}</div>\n//     </>\n//   );\n// }\n\n\n_s(App2, \"BEruBUdUqLSO0g8HcqEHLvtktA4=\", false, function () {\n  return [useInputs];\n});\n\n_c = App2;\nexport default App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"names":["React","useRef","useState","useMemo","useCallback","useReducer","UserList","CreateUser","useInputs","countActiveUsers","users","console","log","filter","user","active","length","initialState","inputs","username","email","id","reducer2","state","action","type","name","value","concat","map","App2","onChange","reset","dispatch","nextId","onCreate","current","onToggle","onRemove","count"],"sources":["/Users/apple/Desktop/git-hub/react-begin/src/App2.js"],"sourcesContent":["import React, { useRef, useState, useMemo, useCallback, useReducer } from 'react';\nimport UserList from './UserList2';\nimport CreateUser from './CreateUser2';\nimport useInputs from './hooks/useInputs';\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n}\n\nconst initialState = {\n  inputs: {\n    username: '',\n    email: ''\n  },\n  users: [\n    {\n      id: 1,\n      username: 'velopert',\n      email: 'public.velopert@gmail.com',\n      active: true\n    },\n    {\n      id: 2,\n      username: 'tester',\n      email: 'tester@example.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'liz',\n      email: 'liz@example.com',\n      active: false\n    }\n  ]\n};\n\nfunction reducer2(state, action){\n  switch (action.type){\n    case 'CHANGE_INPUT':\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.name]: action.value\n        }\n      };\n    case 'CREATE_USER':\n      return {\n        inputs: initialState.inputs,\n        users: state.users.concat(action.user)\n      };\n    case 'TOGGLE_USER':\n      return{\n        ...state,\n        users: state.users.map(user =>\n          user.id === action.id ? { ...user, active: !user.active } : user\n        )\n      };\n    case 'REMOVE_USER':\n      return{\n        ...state,\n        users: state.users.filter(user => user.id !== action.id)\n      };\n    default:\n      return state;\n  }\n}\n\nfunction App2() {\n  //커스텀 hook 사용시\n  const [{username, email}, onChange, reset] = useInputs({\n    username: '',\n    email: ''\n  });\n  const [state, dispatch] = useReducer(reducer2, initialState);\n  const nextId = useRef(4);\n\n  const { users } = state;\n\n  // const { username, email } = state.inputs;\n  // const onChange = useCallback(e => {\n  //   const { name, value } = e.target;\n  //   dispatch({\n  //     type: 'CHANGE_INPUT',\n  //     name,\n  //     value\n  //   });\n  // }, []);\n\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: 'CREATE_USER',\n      user: {\n        id: nextId.current,\n        username,\n        email\n      }\n    });\n    nextId.current += 1;\n  }, [username, email]);\n\n  const onToggle = useCallback(id => {\n    dispatch({\n      type: 'TOGGLE_USER',\n      id\n    });\n  }, []);\n\n  const onRemove = useCallback(id => {\n    dispatch({\n      type: 'REMOVE_USER',\n      id\n    });\n  }, []);\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n\n  return (\n    <>\n      <CreateUser\n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate}\n      />\n      <UserList users={users} onToggle={onToggle} onRemove={onRemove} />\n      <div>활성사용자 수 : {count}</div>\n    </>\n  );\n}\n\n// function App2() {\n//   const [inputs, setInputs] = useState({\n//     username: '',\n//     email: ''\n//   });\n\n//   const { username, email } = inputs;\n\n//   const onChange = useCallback(e => {\n//     const { name, value } = e.target;\n//     setInputs(inputs => ({\n//       ...inputs,\n//       [name]: value\n//     }));\n//   }, []);\n\n//   const [users, setUsers] = useState([\n//     {\n//       id: 1,\n//       username: 'velopert',\n//       email: 'public.velopert@gmail.com',\n//       active: true\n//     },\n//     {\n//       id: 2,\n//       username: 'tester',\n//       email: 'tester@example.com',\n//       active: false\n//     },\n//     {\n//       id: 3,\n//       username: 'liz',\n//       email: 'liz@example.com',\n//       active: false\n//     }\n//   ]);\n\n//   const nextId = useRef(4);\n\n//   const onCreate = useCallback(() => {\n//     const user = {\n//       id: nextId.current,\n//       username,\n//       email\n//     };\n//     setUsers(users => users.concat(user));\n\n//     setInputs({\n//       username: '',\n//       email: ''\n//     });\n//     nextId.current += 1;\n//   }, [username, email]);\n\n//   const onRemove = useCallback(id => {\n//     // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n//     // = user.id 가 id 인 것을 제거함\n//     setUsers(users => users.filter(user => user.id !== id));\n//   }, []);\n//   const onToggle = useCallback(id => {\n//     setUsers(users =>\n//       users.map(user =>\n//         user.id === id ? { ...user, active: !user.active } : user\n//       )\n//     );\n//   }, []);\n//   const count = useMemo(() => countActiveUsers(users), [users]);\n//   return (\n//     <>\n//       <CreateUser\n//         username={username}\n//         email={email}\n//         onChange={onChange}\n//         onCreate={onCreate}\n//       />\n//       <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n//       <div>활성사용자 수 : {count}</div>\n//     </>\n//   );\n// }\n\nexport default App2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}